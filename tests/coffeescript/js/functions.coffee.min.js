
/*
functies (coffeescript in action ISBN 9781617290626 p144)
keywords:
partial application
 */

(function() {
  var add, addOne, bindFirstArg, cost, costPrice, getProfit, mul, multiply, multiplyByTen, numberSold, overhead, profit, revenue, sum, sum2;

  overhead = 140;

  costPrice = 100;

  numberSold = function(salePrice) {
    return 50 + 20 / 10 * (200 - salePrice);
  };

  revenue = function(salePrice) {
    return (numberSold(salePrice)) * salePrice;
  };

  cost = function(salePrice) {
    return overhead + (numberSold(salePrice)) * costPrice;
  };

  profit = function(salePrice) {
    return (revenue(salePrice)) - (cost(salePrice));
  };

  console.log(profit(100));

  add = function(a, b) {
    return console.log(a + b);
  };

  add(1, 2);

  bindFirstArg = function(fn, a) {
    return function(b) {
      return fn(a, b);
    };
  };

  addOne = bindFirstArg(add, 1);

  addOne(1);

  addOne(2);

  multiply = function(a, b) {
    return console.log(a * b);
  };

  multiplyByTen = bindFirstArg(multiply, 10);

  multiplyByTen(3);


  /*
  currying:
  http://cedricruiz.me/blog/functional-coffeescript-for-the-impatient/
  simple concept where you transform a function 
  that takes two or more arguments into a function
  of one argument that keeps returning a function 
  of one argument untill all arguments have been passed
   */

  mul = function(x, y) {
    return x * y;
  };

  mul = function(x) {
    return function(y) {
      return x * y;
    };
  };

  console.log(mul(1)(2));

  sum = function(x, y) {
    return x + y;
  };

  sum2 = function(x) {
    return sum(2, x);
  };

  console.log(sum2(2));


  /*
  partial application
  http://www.drdobbs.com/open-source/currying-and-partial-functions-in-javasc/231001821
   */

  getProfit = function(overhead, costPrice, numberSold) {
    return revenue = function(salePrice) {
      console.log('test');
      return console.log((numberSold(salePrice)) * salePrice);
    };
  };

  getProfit(15, 20, 30);

}).call(this);
