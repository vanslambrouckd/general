
/*
htmlRenderer =
  render: ->
    @view = document.createElement 'div'
    document.body.appendChild @view
	@view.innerHTML = '
	 *{@name}
	 *{@info}
	'
	
class Donut
  constructor: (name, info) ->
    @name = name
	@info = info
	
Donu::render = htmlRenderer.render #works but tedous

 *mixis is collection of related functions that can be attached as methods to objects

dwarves = 
  bashful: -> 'Bashful'
  doc: -> 'Doc'
  dopey: -> 'Dopey'
 */

(function() {
  var Camera2, Mixin1, Prod, ViewMixin, auto, fiets, htmlRenderer, leica,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Mixin1 = (function() {
    function Mixin1(methods) {
      var body, name;
      for (name in methods) {
        body = methods[name];
        this[name] = body;
      }
    }

    Mixin1.prototype.include = function(klass) {
      var key, value, _results;
      _results = [];
      for (key in this) {
        value = this[key];
        _results.push(klass.prototype[key] = value);
      }
      return _results;
    };

    return Mixin1;

  })();

  htmlRenderer = new Mixin1({
    render: function() {
      return "rendered";
    }
  });

  Camera2 = (function() {
    function Camera2() {}

    Camera2.prototype.construct = function(name, info) {
      this.name = name;
      this.info = info;
      this.view = document.createElement('div');
      this.view.className = 'product';
      return document.getElementById('test2').appendChild(this.view);
    };

    htmlRenderer.include(Camera2);

    return Camera2;

  })();

  leica = new Camera2();

  console.log(leica.render());

  ViewMixin = (function() {
    function ViewMixin() {}

    ViewMixin.prototype = null;

    ViewMixin.include = function(to, className) {
      var key, val, _results;
      _results = [];
      for (key in ViewMixin) {
        val = ViewMixin[key];
        _results.push(to.prototype[key] = val);
      }
      return _results;
    };

    ViewMixin.handler = function(event, fn) {
      return this.node[event] = fn;
    };

    ViewMixin.update = function() {
      if (this.node == null) {
        this.node = document.createElement('div');
        this.node.className = this.constructor.name.toLowerCase();
        document.getElementById('test2').appendChild(this.node);
      }
      return this.node.innerHTML = this.template();
    };

    return ViewMixin;

  })();

  Prod = (function() {
    var products;

    ViewMixin.include(Prod);

    products = [];

    function Prod(name, info) {
      this.name = name;
      this.info = info;
      this.purchase = __bind(this.purchase, this);
      products.push(this);
      this.template = (function(_this) {
        return function() {
          return "product: " + _this.name;
        };
      })(this);
      this.update();
      this.handler("onclick", this.purchase);
    }

    Prod.prototype.purchase = function() {
      return alert('purchase');
    };

    return Prod;

  })();

  fiets = new Prod('fiets', {});

  auto = new Prod('auto', {});

}).call(this);
